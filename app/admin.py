from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.const import Ranks
from app.filters.rank_filter import RankFilter
from app.database.requests import (
    change_user_rank, 
    get_user_rank, 
    init_owner_rank,
    #find_user_by_username
)
import app.keyboards as kb

admin = Router()

class RankStates(StatesGroup):
    waiting_for_username = State()

@admin.message(Command("init_owner"))
async def init_owner(message: Message):
    is_success = await init_owner_rank(message.from_user.id)
    await message.answer(
        "‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞" if is_success 
        else "‚ùå –í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    )

@admin.message(Command('admin'))
async def admin_panel(message: Message):
    keyboard = await kb.get_admin_keyboard(
        await get_user_rank(session, message.from_user.id)
    )
    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin.message(Command("setrank"), RankFilter(Ranks.OWNER.value))
async def set_rank(message: Message):
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrank @username —Ä–∞–Ω–≥")
            return

        username = args[0].replace("@", "")
        new_rank = " ".join(args[1:])

        if new_rank not in [rank.value for rank in Ranks]:
            await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–Ω–≥!")
            return

        user = await find_user_by_username(username)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        await change_user_rank(user.tg_id, new_rank)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ {new_rank}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–∞–Ω–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–∞–Ω–≥–∞")

@admin.message(Command("rank"))
async def check_rank(message: Message):
    rank = await get_user_rank(message.from_user.id)
    await message.answer(
        f"üéñ –í–∞—à —Ä–∞–Ω–≥: {rank}" if rank 
        else "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ"
    )

@admin.message(Command("ranks"), RankFilter(Ranks.MODERATOR.value))
async def list_ranks(message: Message):
    ranks = "\n".join(f"‚Ä¢ {rank.value}" for rank in Ranks)
    await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏:\n{ranks}")

@admin.callback_query(lambda c: c.data == "admin_ranks")
async def show_ranks_list(callback: CallbackQuery):
    ranks = "\n".join(f"‚Ä¢ {rank.value}" for rank in Ranks)
    await callback.message.edit_text(
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏:\n{ranks}",
        reply_markup=await kb.get_admin_keyboard(
            await get_user_rank(callback.from_user.id)
        )
    )

@admin.callback_query(lambda c: c.data == "give_rank")
async def start_give_rank(callback: CallbackQuery, state: FSMContext):
    if await get_user_rank(callback.from_user.id) != Ranks.OWNER.value:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–∞–Ω–≥:",
        reply_markup=await kb.get_ranks_keyboard()
    )
    await state.set_state(RankStates.waiting_for_username)

@admin.message(RankStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    username = message.text.replace("@", "")
    
    user = await find_user_by_username(username)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=await kb.get_admin_keyboard(
                await get_user_rank(message.from_user.id)
            )
        )
        await state.clear()
        return
    
    await state.update_data(target_username=username)
    await message.answer(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:",
        reply_markup=await kb.get_ranks_keyboard()
    )

@admin.callback_query(lambda c: c.data.startswith("select_rank_"))
async def process_rank_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get("target_username")
    
    if not username:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        await state.clear()
        return
    
    new_rank = callback.data.replace("select_rank_", "")
    user = await find_user_by_username(username)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        await state.clear()
        return
    
    await change_user_rank(user.tg_id, new_rank)
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ {new_rank}",
        reply_markup=await kb.get_admin_keyboard(
            await get_user_rank(callback.from_user.id)
        )
    )
    await state.clear()

@admin.callback_query(lambda c: c.data == "back_to_admin")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await kb.get_admin_keyboard(
            await get_user_rank(callback.from_user.id)
        )
    )