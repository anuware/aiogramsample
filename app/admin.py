from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, CommandStart, Command
import app.keyboards as kb
from aiogram.filters import Command
from aiogram.types import Message
from app.const import Ranks
from app.filters.rank_filter import RankFilter
from app.database.requests import change_user_rank, get_user_rank, init_owner_rank

admin = Router()

@admin.message(Command("init_owner"))
async def init_owner(message: Message):
    success = await init_owner_rank(message.from_user.id)
    if success:
        await message.answer("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞")
    else:
        await message.answer("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")

@admin.message(Command('admin'))
async def admin_cmd_start(message: Message):
    user_rank = await get_user_rank(message.from_user.id)
    keyboard = await kb.get_admin_keyboard(user_rank)
    await message.answer(
        text="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@admin.message(Command("setrank"), RankFilter(Ranks.OWNER.value))
async def set_rank_command(message: Message):
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrank @username —Ä–∞–Ω–≥")
            return

        username = args[0].replace("@", "")
        new_rank = " ".join(args[1:])

        if new_rank not in [rank.value for rank in Ranks]:
            await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–Ω–≥!")
            return

        async with async_session() as session:
            user = await session.scalar(
                select(User).where(User.username == username)
            )
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            await change_user_rank(user.tg_id, new_rank)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ {new_rank}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–∞–Ω–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–∞–Ω–≥–∞")

@admin.message(Command("rank"))
async def check_rank_command(message: Message):
    user_rank = await get_user_rank(message.from_user.id)
    if user_rank:
        await message.answer(f"üéñ –í–∞—à —Ä–∞–Ω–≥: {user_rank}")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")

@admin.message(Command("ranks"), RankFilter(Ranks.MODERATOR.value))
async def list_ranks_command(message: Message):
    ranks_list = "\n".join([f"‚Ä¢ {rank.value}" for rank in Ranks])
    await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω–≥–∏:\n{ranks_list}")
