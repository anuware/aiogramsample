from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import UserDAO
from app.utils.constants import UserRoles
from app.keyboards import get_admin_keyboard
from app.core.logger import logger

router = Router()

@router.message(Command("init_owner"))
async def init_owner(message: Message, session: AsyncSession):
    dao = UserDAO(session)
    user = await dao.get_or_create_user(message.from_user.id, message.from_user.username)
    
    if await dao.get_owner():
        await message.answer("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
        return
        
    await dao.update_role(message.from_user.id, UserRoles.OWNER)
    await message.answer("‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞", reply_markup=get_admin_keyboard())

@router.message(Command("admin"))
async def admin_panel(message: Message, session: AsyncSession):
    dao = UserDAO(session)
    user = await dao.get_or_create_user(message.from_user.id, message.from_user.username)
    
    if user.role not in [UserRoles.OWNER.value, UserRoles.ADMIN.value]:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
        
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "users_list")
async def show_users(call: CallbackQuery, session: AsyncSession):
    dao = UserDAO(session)
    user = await dao.get_or_create_user(call.from_user.id, call.from_user.username)
    
    if user.role not in [UserRoles.OWNER.value, UserRoles.ADMIN.value]:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    users = await dao.get_all_users(limit=10)
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    
    for user in users:
        text += f"ID: {user.tg_id}\n"
        text += f"–†–æ–ª—å: {user.role}\n"
        text += f"–î–∞—Ç–∞: {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    await call.message.answer(text)
    await call.answer()

@router.callback_query(F.data == "stats")
async def show_stats(call: CallbackQuery, session: AsyncSession):
    dao = UserDAO(session)
    user = await dao.get_or_create_user(call.from_user.id, call.from_user.username)
    
    if user.role not in [UserRoles.OWNER.value, UserRoles.ADMIN.value]:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    total = await dao.get_users_count()
    admins = await dao.get_users_by_role(UserRoles.ADMIN)
    mods = await dao.get_users_by_role(UserRoles.MODERATOR)
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
    text += f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}\n"
    text += f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(mods)}"
    
    await call.message.answer(text)
    await call.answer()

@router.callback_query(F.data == "settings")
async def show_settings(call: CallbackQuery, session: AsyncSession):
    dao = UserDAO(session)
    user = await dao.get_or_create_user(call.from_user.id, call.from_user.username)
    
    if user.role != UserRoles.OWNER.value:
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É", show_alert=True)
        return
        
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
    text += "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
    text += "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
    text += "- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    
    await call.message.answer(text)
    await call.answer()